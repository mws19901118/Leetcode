class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        def isMagic(x: int, y: int) -> bool:                                                                                                                                                                                                  #Given the top left corner of a 3 * 3 grid, determine if it is magic square.
            if any(sum(grid[x + u][y + v] for u, v in t) != 15 for t in triplet):                                                                                                                                                             #Every row, column and diagnol should sum up to 15; otherwise return false.
                return False
            s = set()                                                                                                                                                                                                                         #Store numbers in set.
            for u, v in [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]:                                                                                                                                             #Traverse grid and add number to the set.
                s.add(grid[x + u][y + v])
            if len(s) != 9 or any(i not in s for i in range(1, 10)):                                                                                                                                                                          #The set should have 9 numbers and exactly from 1 to 9.
                return False
            return True                                                                                                                                                                                                                       #Return true at the end. 
        triplet = [[(0, 0), (0, 1), (0, 2)], [(1, 0), (1, 1), (1, 2)], [(2, 0), (2, 1), (2, 2)], [(0, 0), (1, 0), (2, 0)], [(0, 1), (1, 1), (2, 1)], [(0, 2), (1, 2), (2, 2)], [(0, 0), (1, 1), (2, 2)], [(0, 2), (1, 1), (2, 0)]]            #Initialize the list of offset triplets for each row, column and diagnol.
        m, n = len(grid), len(grid[0])                                                                                                                                                                                                        #Get dimensions.
        return sum(isMagic(i, j) for i, j in product(range(m - 2), range(n - 2)))                                                                                                                                                             #Traverse matrix to enumerate top left corner of 3 * 3 grid and count magic squares.
